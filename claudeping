#!/bin/bash

# CloudPing TUI Manager
# Interactive terminal interface for managing Claude Ping System

# Resolve the actual script directory (handle symlinks)
if [ -L "${BASH_SOURCE[0]}" ]; then
    SCRIPT_DIR="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}")")" && pwd)"
else
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
CONFIG_FILE="$SCRIPT_DIR/config.json"
PLIST_DIR="$HOME/Library/LaunchAgents"

# Check if dialog is available, fallback to basic interface
if command -v dialog &> /dev/null; then
    USE_DIALOG=true
else
    USE_DIALOG=false
fi

# Colors for basic interface
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check current service status
check_status() {
    local running_count=0
    for i in {1..4}; do
        if launchctl list | grep -q "com.user.claude-ping-$i"; then
            ((running_count++))
        fi
    done
    
    if [ $running_count -eq 4 ]; then
        echo "running"
    elif [ $running_count -eq 0 ]; then
        echo "stopped"
    else
        echo "partial"
    fi
}

# Get current start hour from config
get_start_hour() {
    if [ -f "$CONFIG_FILE" ] && command -v jq &> /dev/null; then
        jq -r '.start_hour' "$CONFIG_FILE" 2>/dev/null || echo "5"
    else
        echo "5"
    fi
}

# Start services
start_services() {
    echo "Starting CloudPing services..."
    "$SCRIPT_DIR/install.sh" > /dev/null 2>&1
    return $?
}

# Stop services
stop_services() {
    echo "Stopping CloudPing services..."
    "$SCRIPT_DIR/uninstall.sh" > /dev/null 2>&1
    return $?
}

# Update start time
update_start_time() {
    local new_hour=$1
    if command -v jq &> /dev/null; then
        jq ".start_hour = $new_hour" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
        "$SCRIPT_DIR/generate_schedule.sh" > /dev/null 2>&1
        return $?
    else
        echo "{\"start_hour\": $new_hour, \"log_file\": \"~/Library/Logs/claude_ping.log\"}" > "$CONFIG_FILE"
        return $?
    fi
}

# Dialog-based interface
dialog_interface() {
    while true; do
        local status=$(check_status)
        local start_hour=$(get_start_hour)
        
        case $status in
            "running") status_text="🟢 Running" ;;
            "stopped") status_text="🔴 Stopped" ;;
            "partial") status_text="🟡 Partial" ;;
        esac
        
        # Calculate ping times
        local times=()
        local hour=$start_hour
        local minute=0
        for i in {1..4}; do
            times+=($(printf "%02d:%02d" $hour $minute))
            minute=$((minute + 1))
            hour=$((hour + 5))
            if [ $hour -ge 24 ]; then
                hour=$((hour - 24))
            fi
        done
        
        local choice=$(dialog --clear --backtitle "CloudPing Manager" \
            --title "Claude Ping System Control" \
            --menu "Status: $status_text | Start: $(printf "%02d:00" $start_hour) | Pings: ${times[*]}" \
            15 70 6 \
            1 "Toggle Service (Start/Stop)" \
            2 "Configure Start Time" \
            3 "View Logs" \
            4 "View Schedule" \
            5 "Exit" 2>&1 >/dev/tty)
        
        case $choice in
            1)
                if [ "$status" = "running" ] || [ "$status" = "partial" ]; then
                    stop_services
                    dialog --msgbox "CloudPing services stopped." 6 40
                else
                    start_services
                    dialog --msgbox "CloudPing services started." 6 40
                fi
                ;;
            2)
                local hour_choice=$(dialog --clear --backtitle "CloudPing Manager" \
                    --title "Select Start Time" \
                    --radiolist "Choose the hour for first ping:" \
                    15 50 10 \
                    5 "05:00 AM" $([ "$start_hour" -eq 5 ] && echo "on" || echo "off") \
                    6 "06:00 AM" $([ "$start_hour" -eq 6 ] && echo "on" || echo "off") \
                    7 "07:00 AM" $([ "$start_hour" -eq 7 ] && echo "on" || echo "off") \
                    8 "08:00 AM" $([ "$start_hour" -eq 8 ] && echo "on" || echo "off") \
                    9 "09:00 AM" $([ "$start_hour" -eq 9 ] && echo "on" || echo "off") \
                    10 "10:00 AM" $([ "$start_hour" -eq 10 ] && echo "on" || echo "off") \
                    11 "11:00 AM" $([ "$start_hour" -eq 11 ] && echo "on" || echo "off") \
                    12 "12:00 PM" $([ "$start_hour" -eq 12 ] && echo "on" || echo "off") \
                    2>&1 >/dev/tty)
                
                if [ -n "$hour_choice" ]; then
                    update_start_time "$hour_choice"
                    if [ "$status" = "running" ]; then
                        start_services  # Restart with new schedule
                    fi
                    dialog --msgbox "Start time updated to $(printf "%02d:00" $hour_choice)" 6 40
                fi
                ;;
            3)
                local log_file=$(jq -r '.log_file' "$CONFIG_FILE" 2>/dev/null || echo "~/Library/Logs/claude_ping.log")
                log_file="${log_file/#\~/$HOME}"
                if [ -f "$log_file" ]; then
                    dialog --textbox "$log_file" 20 70
                else
                    dialog --msgbox "Log file not found: $log_file" 6 50
                fi
                ;;
            4)
                local schedule_text="Current Schedule:\n\n"
                schedule_text+="Start Hour: $(printf "%02d:00" $start_hour)\n"
                schedule_text+="Ping Times:\n"
                for i in {0..3}; do
                    schedule_text+="  $((i+1)). ${times[$i]}\n"
                done
                dialog --msgbox "$schedule_text" 12 40
                ;;
            5|"")
                clear
                exit 0
                ;;
        esac
    done
}

# Basic interface (fallback when dialog is not available)
basic_interface() {
    while true; do
        clear
        echo -e "${BLUE}╔══════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║            CloudPing Manager         ║${NC}"
        echo -e "${BLUE}╚══════════════════════════════════════╝${NC}"
        echo ""
        
        local status=$(check_status)
        local start_hour=$(get_start_hour)
        
        case $status in
            "running") echo -e "Status: ${GREEN}🟢 Running${NC}" ;;
            "stopped") echo -e "Status: ${RED}🔴 Stopped${NC}" ;;
            "partial") echo -e "Status: ${YELLOW}🟡 Partial${NC}" ;;
        esac
        
        echo -e "Start Time: $(printf "%02d:00" $start_hour)"
        
        # Show ping times
        local hour=$start_hour
        local minute=0
        echo "Ping Schedule:"
        for i in {1..4}; do
            echo "  $i. $(printf "%02d:%02d" $hour $minute)"
            minute=$((minute + 1))
            hour=$((hour + 5))
            if [ $hour -ge 24 ]; then
                hour=$((hour - 24))
            fi
        done
        
        echo ""
        echo "Options:"
        echo "1. Toggle Service (Start/Stop)"
        echo "2. Configure Start Time"
        echo "3. View Logs"
        echo "4. Exit"
        echo ""
        echo -n "Choose option [1-4]: "
        
        read -r choice
        case $choice in
            1)
                if [ "$status" = "running" ] || [ "$status" = "partial" ]; then
                    stop_services
                    echo -e "${GREEN}Services stopped.${NC}"
                else
                    start_services
                    echo -e "${GREEN}Services started.${NC}"
                fi
                echo "Press Enter to continue..."
                read -r
                ;;
            2)
                echo "Select start hour [5-12]: "
                read -r new_hour
                if [[ "$new_hour" =~ ^[5-9]$|^1[0-2]$ ]]; then
                    update_start_time "$new_hour"
                    if [ "$status" = "running" ]; then
                        start_services
                    fi
                    echo -e "${GREEN}Start time updated to $(printf "%02d:00" $new_hour)${NC}"
                else
                    echo -e "${RED}Invalid hour. Please enter 5-12.${NC}"
                fi
                echo "Press Enter to continue..."
                read -r
                ;;
            3)
                local log_file=$(jq -r '.log_file' "$CONFIG_FILE" 2>/dev/null || echo "~/Library/Logs/claude_ping.log")
                log_file="${log_file/#\~/$HOME}"
                if [ -f "$log_file" ]; then
                    echo "Recent ping logs:"
                    tail -20 "$log_file"
                else
                    echo -e "${RED}Log file not found: $log_file${NC}"
                fi
                echo "Press Enter to continue..."
                read -r
                ;;
            4)
                clear
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option${NC}"
                sleep 1
                ;;
        esac
    done
}

# Main execution
main() {
    # Check if we're in the right directory or if tools are available
    if [ ! -f "$CONFIG_FILE" ]; then
        echo "Error: CloudPing not found in this directory."
        echo "Please run from the Mac_scripts directory or install globally."
        exit 1
    fi
    
    if [ "$USE_DIALOG" = true ]; then
        dialog_interface
    else
        # Try to install dialog
        if command -v brew &> /dev/null; then
            echo "Installing dialog for better interface..."
            brew install dialog 2>/dev/null && USE_DIALOG=true
        fi
        
        if [ "$USE_DIALOG" = true ]; then
            dialog_interface
        else
            basic_interface
        fi
    fi
}

# Run main function
main "$@"